<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="590" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="348" />
    <histories>
      <item value="실시간 정보로 갱신한다" />
      <item value="실시간 정보를 반영한다" />
      <item value="retrieve" />
      <item value="retri" />
      <item value="실시간 시세 갱신" />
      <item value="관심종목" />
      <item value="fluctate" />
      <item value="거래 금액" />
      <item value="거래량" />
      <item value="일일 정보" />
      <item value="시가총액" />
      <item value="support" />
      <item value="wl" />
      <item value="hibernate" />
      <item value="한글명" />
      <item value="전일 종가" />
      <item value="company" />
      <item value="ticker" />
      <item value="중립" />
      <item value="유지" />
      <item value="중도" />
      <item value="중간" />
      <item value="중" />
      <item value="증가율" />
      <item value="변화율" />
      <item value="상승률" />
      <item value="tkdtm" />
      <item value="eprecated&#10;This algorithm is now obsolete." />
      <item value="account principal" />
      <item value="principal accoun" />
      <item value="principal account" />
      <item value="principal" />
      <item value="prin" />
      <item value="oauth2" />
      <item value="Standard and custom (non-standard) parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint." />
      <item value="cookie expiration seconds" />
      <item value="cookie expire seconds" />
      <item value="쿠키 만료 시간" />
      <item value="쿠키 만료" />
      <item value="attributes" />
      <item value="attribute" />
      <item value="After successfully authenticating with the OAuth2 Provider, we'll be generating an auth token for the user and sending the token to the redirectUri mentioned by the frontend client in the /oauth2/authorize request. We're not using cookies because they won't work well in mobile clients." />
      <item value="After successfully authenticating with the OAuth2 Provider, we'll be generating an auth token for the user and sending the token to the redirectUri mentioned by the frontend client in the/oauth2/authorize request. We're not using cookies because they won't work well in mobile clients." />
      <item value="After successfully authenticating with the OAuth2 Provider, we'll be generating an auth token for the user and sending the token to the redirectUri mentioned by the frontend client in the /oauth2/authorize request.&#10;    #- We're not using cookies because they won't work well in mobile clients." />
      <item value="After successfully authenticating with the OAuth2 Provider, we'll be generating an auth token for the user and sending the token to the redirectUri mentioned by the frontend client in the /oauth2/authorize request.&#10;    # We're not using cookies because they won't work well in mobile clients." />
      <item value="After successfully authenticating with the OAuth2 Provider,&#10;     we'll be generating an auth token for the user and sending the token to the redirectUri mentioned by the frontend client in the /oauth2/authorize request.&#10;    # We're not using cookies because they won't work well in mobile clients." />
      <item value="After successfully authenticating with the OAuth2 Provider,&#10;    # we'll be generating an auth token for the user and sending the token to the redirectUri mentioned by the frontend client in the /oauth2/authorize request.&#10;    # We're not using cookies because they won't work well in mobile clients." />
      <item value="After successfully authenticating with the OAuth2 Provider,&#10;    # we'll be generating an auth token for the user and sending the token to the&#10;    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.&#10;    # We're not using cookies because they won't work well in mobile clients." />
      <item value="Create a new builder with a CREATED status and a location header set to the given URI." />
      <item value="Override this method to expose the AuthenticationManager from configure(AuthenticationManagerBuilder) to be exposed as a Bean. For example:&#10;&#9;   @Bean(name name=&quot;myAuthenticationManager&quot;)&#10;&#9;   @Override&#10;&#9;   public AuthenticationManager authenticationManagerBean() throws Exception {&#10;&#9;       return super.authenticationManagerBean();&#10;&#9;   }" />
    </histories>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1628242148040" />
  </component>
  <component name="Settings">
    <option name="phoneticFontFamily" value="AppleSDGothicNeoL00" />
    <option name="primaryFontFamily" value="AppleSDGothicNeoM00" />
  </component>
</application>