<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="566" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="348" />
    <histories>
      <item value="스타를 줬는가" />
      <item value="스타를 눌렀는가" />
      <item value="PostP" />
      <item value="Post" />
      <item value="미리보기" />
      <item value="작성자" />
      <item value="wkrtj" />
      <item value="내용" />
      <item value="게시물" />
      <item value="진행 중이" />
      <item value="진행 중인" />
      <item value="유효한" />
      <item value="투표 인원" />
      <item value="가격 변동" />
      <item value="ascending" />
      <item value="asce" />
      <item value="정렬 방향" />
      <item value="정렬 옵션" />
      <item value="기주" />
      <item value="기준" />
      <item value="정렬 기준 문자여" />
      <item value="정렬 기준 문자열" />
      <item value="정렬 기준 " />
      <item value="정렬 기준 이름" />
      <item value="정렬 기준" />
      <item value="정렭" />
      <item value="wjdf" />
      <item value="정렬" />
      <item value="It is highly recommended not to use wildcard types as return types. Because the type inference rules are fairly complex it is unlikely the user of that API will know how to use it correctly.&#10;Let’s take the example of method returning a &quot;List&lt;? extends Animal&gt;&quot;. Is it possible on this list to add a Dog, a Cat, …​ we simply don’t know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method parameters.&#10;This rule raises an issue when a method returns a wildcard type." />
      <item value="참가자 수를 구해라" />
      <item value="participant count" />
      <item value="participants count" />
      <item value="참가했던 모든 것을 찾는다" />
      <item value="참여했던 모든 것을 찾는다" />
      <item value="A reference to null should never be dereferenced/accessed. Doing so will cause a NullPointerException to be thrown. At best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.&#10;Note that when they are present, this rule takes advantage of @CheckForNull and @Nonnull annotations defined in JSR-305 to understand which values are and are not nullable except when @Nonnull is used on the parameter to equals, which by contract should always work with null." />
      <item value="존재하지 않는 리소스 예외" />
      <item value="존재하지 않는 리소스" />
      <item value="유효하지 않는 요청" />
      <item value="유효하지 않는 " />
      <item value="유효" />
      <item value="삭제하기 전에" />
      <item value="삭제되기 전에" />
      <item value="존재하지 않는" />
      <item value="존재하지 " />
      <item value="제곱" />
      <item value="꼬리" />
      <item value="선" />
      <item value="선미" />
      <item value="선두" />
      <item value="제곱수" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="27" />
        <entry key="KOREAN" value="45" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1631428869287" />
  </component>
  <component name="Settings">
    <option name="phoneticFontFamily" value="AppleSDGothicNeoL00" />
    <option name="primaryFontFamily" value="AppleSDGothicNeoM00" />
  </component>
</application>